generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bookingCaptureStates {
  bookingid String    @db.VarChar(100)
  stateid   Int
  createdby String?   @db.VarChar(255)
  isactive  Boolean?
  createdat DateTime? @db.Timestamp(6)
  updatedat DateTime? @db.Timestamp(6)

  @@id([bookingid, stateid])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model bookingStateTransition {
  fromstateid      Int?
  tostateid        Int?
  triggercondition String?   @db.VarChar(255)
  isactive         Boolean?
  createdat        DateTime? @db.Timestamp(6)
  updatedat        DateTime? @db.Timestamp(6)

  @@ignore
}

model bookingStates {
  stateid     Int       @id @default(autoincrement())
  statename   String    @db.VarChar(255)
  userroleids Int[]
  isactive    Boolean
  createdat   DateTime? @default(now()) @db.Timestamp(6)
  updatedat   DateTime? @default(now()) @db.Timestamp(6)
}

model diagnosticsTestAttributes {
  attributeid   Int       @id @default(autoincrement())
  attributename String    @db.VarChar
  attributetype String    @db.VarChar
  isactive      Boolean?  @default(true)
  createdat     DateTime? @default(now()) @db.Timestamp(6)
  updatedat     DateTime? @default(now()) @db.Timestamp(6)
}

model diagnosticsTestAttributesStore {
  id             Int       @id @default(autoincrement())
  partnerid      Int
  testid         String    @db.VarChar
  attributeid    Int
  attributevalue String    @db.VarChar
  isactive       Boolean?  @default(true)
  createdat      DateTime? @default(now()) @db.Timestamp(6)
  updatedat      DateTime? @default(now()) @db.Timestamp(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model labLocations {
  labid          BigInt    @id @default(autoincrement())
  labname        String?   @db.VarChar(255)
  labaddress     String?   @db.VarChar
  pincode        Int?
  pointofcontact String?   @db.VarChar(50)
  phonenumber    String?   @db.VarChar
  labtimings     String?   @db.VarChar(50)
  isactive       Boolean?  @default(true)
  createdat      DateTime? @default(now()) @db.Timestamp(6)
  updatedat      DateTime? @default(now()) @db.Timestamp(6)
  city           String?   @db.VarChar
  partnerid      Int?
  latitude       Float?
  longitude      Float?
}

model partnerDetails {
  partnerid   Int       @id @default(autoincrement())
  partnername String    @db.VarChar(255)
  isactive    Boolean?  @default(true)
  createdat   DateTime? @default(now()) @db.Timestamp(6)
  updatedat   DateTime? @default(now()) @db.Timestamp(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model serviceablePincodes {
  id        Int       @id @default(autoincrement())
  city      String?   @db.VarChar(255)
  state     String?   @db.VarChar(255)
  pincode   Int?
  isactive  Boolean?  @default(true)
  createdat DateTime? @default(now()) @db.Timestamp(6)
  updatedat DateTime? @default(now()) @db.Timestamp(6)
}

model contactrequests {
  id               Int      @id @default(autoincrement())
  fullname         String   @db.VarChar(255)
  emailid          String   @db.VarChar(255)
  mobilenumber     String   @db.VarChar(15)
  organisationname String?  @db.VarChar(255)
  counter          Int?
  createdat        DateTime @db.Timestamptz(6)
}

model signupRequests {
  id        BigInt    @id @default(autoincrement())
  emailid   String?
  deadline  DateTime? @db.Timestamptz(6)
  mobile    BigInt?
  uniquekey String?
  isused    Boolean?
  createdat DateTime? @db.Timestamptz(6)
  updatedat DateTime? @db.Timestamptz(6)
}

model userAuthPassDetails {
  userid      BigInt      @id
  hashedkey   String      @db.VarChar
  saltkey     String      @db.VarChar
  createdat   DateTime?   @db.Timestamp(6)
  updatedat   DateTime?   @db.Timestamp(6)
  userDetails userDetails @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction, map: "userauthpassdetails_userid_fkey")
}

model userDetails {
  userid              BigInt               @id
  fullname            String               @db.VarChar
  organisationname    String               @db.VarChar
  emailid             String               @db.VarChar
  mobilenumber        String               @db.VarChar
  roleid              Int
  token               String?              @db.VarChar
  createdat           DateTime?            @db.Timestamp(6)
  updatedat           DateTime?            @db.Timestamp(6)
  userAuthPassDetails userAuthPassDetails?
}

model userTermsConditions {
  termsconditionsid      BigInt    @id
  userid                 BigInt?
  termsandconditionstext String?
  createdat              DateTime? @db.Timestamp(6)
  createdby              BigInt?
  updatedat              DateTime? @db.Timestamp(6)
  updatedby              BigInt?
  isactive               Boolean?
}

model eventAttributesStore {
  eventid      BigInt
  key          String       @db.VarChar(255)
  value        String?
  createdby    BigInt?
  createdat    DateTime?    @db.Timestamp(6)
  updatedby    BigInt?
  updatedat    DateTime?    @db.Timestamp(6)
  eventDetails eventDetails @relation(fields: [eventid], references: [eventid], onDelete: Cascade, onUpdate: NoAction)

  @@id([eventid, key])
}

model eventDetails {
  eventid              BigInt                 @id(map: "eventdetails_pkey")
  eventname            String?                @db.VarChar(255)
  userid               BigInt?
  eventstatus          String?                @db.VarChar(255)
  eventstarttime       DateTime?              @db.Timestamp(6)
  eventduration        Int?
  deliverydate         DateTime?              @db.Timestamp(6)
  createdby            BigInt?
  createdat            DateTime?              @db.Timestamp(6)
  updatedby            BigInt?
  updatedat            DateTime?              @db.Timestamp(6)
  eventAttributesStore eventAttributesStore[]
}

model productComparisons {
  productid      BigInt    @id
  vendoruserid   BigInt?
  counterprice   Int?
  vendorprice    Int?
  vendorunittype String?   @db.VarChar
  status         String?   @db.VarChar
  createdat      DateTime? @db.Timestamp(6)
  createdby      BigInt?
  updatedat      DateTime? @db.Timestamp(6)
  updatedby      BigInt?
  vendorstatus   String?   @db.VarChar
  userstatus     String?   @db.VarChar

  @@unique([productid, vendoruserid])
}

model products {
  productid        BigInt    @id @default(autoincrement())
  userid           BigInt?
  product          String?
  productvariant   String?
  quantity         Int?
  deliverylocation String?
  status           String?   @db.VarChar
  createdat        DateTime? @db.Timestamp(6)
  createdby        BigInt?
  updatedat        DateTime? @db.Timestamp(6)
  updatedby        BigInt?
}
